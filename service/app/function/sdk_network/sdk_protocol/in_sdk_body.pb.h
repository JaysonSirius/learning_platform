// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_sdk_body.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fsdk_5fbody_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fsdk_5fbody_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fsdk_5fbody_2eproto;
namespace insider {
namespace sdk {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Content;
class ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace sdk
}  // namespace insider
PROTOBUF_NAMESPACE_OPEN
template<> ::insider::sdk::Body* Arena::CreateMaybeMessage<::insider::sdk::Body>(Arena*);
template<> ::insider::sdk::Content* Arena::CreateMaybeMessage<::insider::sdk::Content>(Arena*);
template<> ::insider::sdk::User* Arena::CreateMaybeMessage<::insider::sdk::User>(Arena*);
template<> ::insider::sdk::UserInfo* Arena::CreateMaybeMessage<::insider::sdk::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace insider {
namespace sdk {

enum UserInfo_UserType : int {
  UserInfo_UserType_U_LOGIN = 0,
  UserInfo_UserType_U_LOGOUT = 1,
  UserInfo_UserType_U_VERI = 2,
  UserInfo_UserType_UserInfo_UserType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserInfo_UserType_UserInfo_UserType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserInfo_UserType_IsValid(int value);
constexpr UserInfo_UserType UserInfo_UserType_UserType_MIN = UserInfo_UserType_U_LOGIN;
constexpr UserInfo_UserType UserInfo_UserType_UserType_MAX = UserInfo_UserType_U_VERI;
constexpr int UserInfo_UserType_UserType_ARRAYSIZE = UserInfo_UserType_UserType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserInfo_UserType_descriptor();
template<typename T>
inline const std::string& UserInfo_UserType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserInfo_UserType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserInfo_UserType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserInfo_UserType_descriptor(), enum_t_value);
}
inline bool UserInfo_UserType_Parse(
    const std::string& name, UserInfo_UserType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserInfo_UserType>(
    UserInfo_UserType_descriptor(), name, value);
}
enum OperationType : int {
  GET = 0,
  POST = 1,
  PUT = 2,
  DELETE = 3,
  OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperationType_IsValid(int value);
constexpr OperationType OperationType_MIN = GET;
constexpr OperationType OperationType_MAX = DELETE;
constexpr int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor();
template<typename T>
inline const std::string& OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationType_descriptor(), enum_t_value);
}
inline bool OperationType_Parse(
    const std::string& name, OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
enum ResponseResult : int {
  OK = 0,
  ERROR = 1,
  ResponseResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseResult_IsValid(int value);
constexpr ResponseResult ResponseResult_MIN = OK;
constexpr ResponseResult ResponseResult_MAX = ERROR;
constexpr int ResponseResult_ARRAYSIZE = ResponseResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseResult_descriptor();
template<typename T>
inline const std::string& ResponseResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseResult_descriptor(), enum_t_value);
}
inline bool ResponseResult_Parse(
    const std::string& name, ResponseResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseResult>(
    ResponseResult_descriptor(), name, value);
}
// ===================================================================

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserPassFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_pass = 2;
  void clear_user_pass();
  const std::string& user_pass() const;
  void set_user_pass(const std::string& value);
  void set_user_pass(std::string&& value);
  void set_user_pass(const char* value);
  void set_user_pass(const char* value, size_t size);
  std::string* mutable_user_pass();
  std::string* release_user_pass();
  void set_allocated_user_pass(std::string* user_pass);
  private:
  const std::string& _internal_user_pass() const;
  void _internal_set_user_pass(const std::string& value);
  std::string* _internal_mutable_user_pass();
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_pass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_2eproto;
};
// -------------------------------------------------------------------

class UserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.UserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserInfo_UserType UserType;
  static constexpr UserType U_LOGIN =
    UserInfo_UserType_U_LOGIN;
  static constexpr UserType U_LOGOUT =
    UserInfo_UserType_U_LOGOUT;
  static constexpr UserType U_VERI =
    UserInfo_UserType_U_VERI;
  static inline bool UserType_IsValid(int value) {
    return UserInfo_UserType_IsValid(value);
  }
  static constexpr UserType UserType_MIN =
    UserInfo_UserType_UserType_MIN;
  static constexpr UserType UserType_MAX =
    UserInfo_UserType_UserType_MAX;
  static constexpr int UserType_ARRAYSIZE =
    UserInfo_UserType_UserType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UserType_descriptor() {
    return UserInfo_UserType_descriptor();
  }
  template<typename T>
  static inline const std::string& UserType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserType_Name.");
    return UserInfo_UserType_Name(enum_t_value);
  }
  static inline bool UserType_Parse(const std::string& name,
      UserType* value) {
    return UserInfo_UserType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kTokenFieldNumber = 3,
    kUserTypeFieldNumber = 1,
  };
  // repeated .insider.sdk.User user = 2;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::insider::sdk::User* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::User >*
      mutable_user();
  private:
  const ::insider::sdk::User& _internal_user(int index) const;
  ::insider::sdk::User* _internal_add_user();
  public:
  const ::insider::sdk::User& user(int index) const;
  ::insider::sdk::User* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::User >&
      user() const;

  // repeated string token = 3;
  int token_size() const;
  private:
  int _internal_token_size() const;
  public:
  void clear_token();
  const std::string& token(int index) const;
  std::string* mutable_token(int index);
  void set_token(int index, const std::string& value);
  void set_token(int index, std::string&& value);
  void set_token(int index, const char* value);
  void set_token(int index, const char* value, size_t size);
  std::string* add_token();
  void add_token(const std::string& value);
  void add_token(std::string&& value);
  void add_token(const char* value);
  void add_token(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& token() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_token();
  private:
  const std::string& _internal_token(int index) const;
  std::string* _internal_add_token();
  public:

  // .insider.sdk.UserInfo.UserType user_type = 1;
  void clear_user_type();
  ::insider::sdk::UserInfo_UserType user_type() const;
  void set_user_type(::insider::sdk::UserInfo_UserType value);
  private:
  ::insider::sdk::UserInfo_UserType _internal_user_type() const;
  void _internal_set_user_type(::insider::sdk::UserInfo_UserType value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.UserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::User > user_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> token_;
  int user_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_2eproto;
};
// -------------------------------------------------------------------

class Content :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.Content) */ {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Content* New() const final {
    return CreateMaybeMessage<Content>(nullptr);
  }

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.Content";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
  };
  // int64 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::int64 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.Content)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_2eproto;
};
// -------------------------------------------------------------------

class Body :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:insider.sdk.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return CreateMaybeMessage<Body>(nullptr);
  }

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "insider.sdk.Body";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fsdk_5fbody_2eproto);
    return ::descriptor_table_in_5fsdk_5fbody_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseResultFieldNumber = 4,
    kContentFieldNumber = 5,
    kUrlFieldNumber = 2,
    kUserFieldNumber = 1,
    kMethodFieldNumber = 3,
  };
  // repeated .insider.sdk.ResponseResult response_result = 4;
  int response_result_size() const;
  private:
  int _internal_response_result_size() const;
  public:
  void clear_response_result();
  private:
  ::insider::sdk::ResponseResult _internal_response_result(int index) const;
  void _internal_add_response_result(::insider::sdk::ResponseResult value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_response_result();
  public:
  ::insider::sdk::ResponseResult response_result(int index) const;
  void set_response_result(int index, ::insider::sdk::ResponseResult value);
  void add_response_result(::insider::sdk::ResponseResult value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& response_result() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_response_result();

  // repeated .insider.sdk.Content content = 5;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  ::insider::sdk::Content* mutable_content(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::Content >*
      mutable_content();
  private:
  const ::insider::sdk::Content& _internal_content(int index) const;
  ::insider::sdk::Content* _internal_add_content();
  public:
  const ::insider::sdk::Content& content(int index) const;
  ::insider::sdk::Content* add_content();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::Content >&
      content() const;

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .insider.sdk.UserInfo user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::insider::sdk::UserInfo& user() const;
  ::insider::sdk::UserInfo* release_user();
  ::insider::sdk::UserInfo* mutable_user();
  void set_allocated_user(::insider::sdk::UserInfo* user);
  private:
  const ::insider::sdk::UserInfo& _internal_user() const;
  ::insider::sdk::UserInfo* _internal_mutable_user();
  public:

  // .insider.sdk.OperationType method = 3;
  void clear_method();
  ::insider::sdk::OperationType method() const;
  void set_method(::insider::sdk::OperationType value);
  private:
  ::insider::sdk::OperationType _internal_method() const;
  void _internal_set_method(::insider::sdk::OperationType value);
  public:

  // @@protoc_insertion_point(class_scope:insider.sdk.Body)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> response_result_;
  mutable std::atomic<int> _response_result_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::Content > content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::insider::sdk::UserInfo* user_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fsdk_5fbody_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string user_name = 1;
inline void User::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::user_name() const {
  // @@protoc_insertion_point(field_get:insider.sdk.User.user_name)
  return _internal_user_name();
}
inline void User::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:insider.sdk.User.user_name)
}
inline std::string* User::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.User.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& User::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void User::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.User.user_name)
}
inline void User::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.User.user_name)
}
inline void User::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.User.user_name)
}
inline std::string* User::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_user_name() {
  // @@protoc_insertion_point(field_release:insider.sdk.User.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.User.user_name)
}

// string user_pass = 2;
inline void User::clear_user_pass() {
  user_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::user_pass() const {
  // @@protoc_insertion_point(field_get:insider.sdk.User.user_pass)
  return _internal_user_pass();
}
inline void User::set_user_pass(const std::string& value) {
  _internal_set_user_pass(value);
  // @@protoc_insertion_point(field_set:insider.sdk.User.user_pass)
}
inline std::string* User::mutable_user_pass() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.User.user_pass)
  return _internal_mutable_user_pass();
}
inline const std::string& User::_internal_user_pass() const {
  return user_pass_.GetNoArena();
}
inline void User::_internal_set_user_pass(const std::string& value) {
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_user_pass(std::string&& value) {
  
  user_pass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.User.user_pass)
}
inline void User::set_user_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.User.user_pass)
}
inline void User::set_user_pass(const char* value, size_t size) {
  
  user_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.User.user_pass)
}
inline std::string* User::_internal_mutable_user_pass() {
  
  return user_pass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_user_pass() {
  // @@protoc_insertion_point(field_release:insider.sdk.User.user_pass)
  
  return user_pass_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_user_pass(std::string* user_pass) {
  if (user_pass != nullptr) {
    
  } else {
    
  }
  user_pass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_pass);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.User.user_pass)
}

// -------------------------------------------------------------------

// UserInfo

// .insider.sdk.UserInfo.UserType user_type = 1;
inline void UserInfo::clear_user_type() {
  user_type_ = 0;
}
inline ::insider::sdk::UserInfo_UserType UserInfo::_internal_user_type() const {
  return static_cast< ::insider::sdk::UserInfo_UserType >(user_type_);
}
inline ::insider::sdk::UserInfo_UserType UserInfo::user_type() const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserInfo.user_type)
  return _internal_user_type();
}
inline void UserInfo::_internal_set_user_type(::insider::sdk::UserInfo_UserType value) {
  
  user_type_ = value;
}
inline void UserInfo::set_user_type(::insider::sdk::UserInfo_UserType value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:insider.sdk.UserInfo.user_type)
}

// repeated .insider.sdk.User user = 2;
inline int UserInfo::_internal_user_size() const {
  return user_.size();
}
inline int UserInfo::user_size() const {
  return _internal_user_size();
}
inline void UserInfo::clear_user() {
  user_.Clear();
}
inline ::insider::sdk::User* UserInfo::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserInfo.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::User >*
UserInfo::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:insider.sdk.UserInfo.user)
  return &user_;
}
inline const ::insider::sdk::User& UserInfo::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::insider::sdk::User& UserInfo::user(int index) const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserInfo.user)
  return _internal_user(index);
}
inline ::insider::sdk::User* UserInfo::_internal_add_user() {
  return user_.Add();
}
inline ::insider::sdk::User* UserInfo::add_user() {
  // @@protoc_insertion_point(field_add:insider.sdk.UserInfo.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::User >&
UserInfo::user() const {
  // @@protoc_insertion_point(field_list:insider.sdk.UserInfo.user)
  return user_;
}

// repeated string token = 3;
inline int UserInfo::_internal_token_size() const {
  return token_.size();
}
inline int UserInfo::token_size() const {
  return _internal_token_size();
}
inline void UserInfo::clear_token() {
  token_.Clear();
}
inline std::string* UserInfo::add_token() {
  // @@protoc_insertion_point(field_add_mutable:insider.sdk.UserInfo.token)
  return _internal_add_token();
}
inline const std::string& UserInfo::_internal_token(int index) const {
  return token_.Get(index);
}
inline const std::string& UserInfo::token(int index) const {
  // @@protoc_insertion_point(field_get:insider.sdk.UserInfo.token)
  return _internal_token(index);
}
inline std::string* UserInfo::mutable_token(int index) {
  // @@protoc_insertion_point(field_mutable:insider.sdk.UserInfo.token)
  return token_.Mutable(index);
}
inline void UserInfo::set_token(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:insider.sdk.UserInfo.token)
  token_.Mutable(index)->assign(value);
}
inline void UserInfo::set_token(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:insider.sdk.UserInfo.token)
  token_.Mutable(index)->assign(std::move(value));
}
inline void UserInfo::set_token(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:insider.sdk.UserInfo.token)
}
inline void UserInfo::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.UserInfo.token)
}
inline std::string* UserInfo::_internal_add_token() {
  return token_.Add();
}
inline void UserInfo::add_token(const std::string& value) {
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:insider.sdk.UserInfo.token)
}
inline void UserInfo::add_token(std::string&& value) {
  token_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:insider.sdk.UserInfo.token)
}
inline void UserInfo::add_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:insider.sdk.UserInfo.token)
}
inline void UserInfo::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:insider.sdk.UserInfo.token)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserInfo::token() const {
  // @@protoc_insertion_point(field_list:insider.sdk.UserInfo.token)
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserInfo::mutable_token() {
  // @@protoc_insertion_point(field_mutable_list:insider.sdk.UserInfo.token)
  return &token_;
}

// -------------------------------------------------------------------

// Content

// int64 magic = 1;
inline void Content::clear_magic() {
  magic_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Content::magic() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Content.magic)
  return _internal_magic();
}
inline void Content::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  magic_ = value;
}
inline void Content::set_magic(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Content.magic)
}

// -------------------------------------------------------------------

// Body

// .insider.sdk.UserInfo user = 1;
inline bool Body::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Body::has_user() const {
  return _internal_has_user();
}
inline void Body::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::insider::sdk::UserInfo& Body::_internal_user() const {
  const ::insider::sdk::UserInfo* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::insider::sdk::UserInfo*>(
      &::insider::sdk::_UserInfo_default_instance_);
}
inline const ::insider::sdk::UserInfo& Body::user() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Body.user)
  return _internal_user();
}
inline ::insider::sdk::UserInfo* Body::release_user() {
  // @@protoc_insertion_point(field_release:insider.sdk.Body.user)
  
  ::insider::sdk::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::insider::sdk::UserInfo* Body::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::insider::sdk::UserInfo>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::insider::sdk::UserInfo* Body::mutable_user() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Body.user)
  return _internal_mutable_user();
}
inline void Body::set_allocated_user(::insider::sdk::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Body.user)
}

// string url = 2;
inline void Body::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Body::url() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Body.url)
  return _internal_url();
}
inline void Body::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Body.url)
}
inline std::string* Body::mutable_url() {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Body.url)
  return _internal_mutable_url();
}
inline const std::string& Body::_internal_url() const {
  return url_.GetNoArena();
}
inline void Body::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Body::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:insider.sdk.Body.url)
}
inline void Body::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:insider.sdk.Body.url)
}
inline void Body::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:insider.sdk.Body.url)
}
inline std::string* Body::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Body::release_url() {
  // @@protoc_insertion_point(field_release:insider.sdk.Body.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Body::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:insider.sdk.Body.url)
}

// .insider.sdk.OperationType method = 3;
inline void Body::clear_method() {
  method_ = 0;
}
inline ::insider::sdk::OperationType Body::_internal_method() const {
  return static_cast< ::insider::sdk::OperationType >(method_);
}
inline ::insider::sdk::OperationType Body::method() const {
  // @@protoc_insertion_point(field_get:insider.sdk.Body.method)
  return _internal_method();
}
inline void Body::_internal_set_method(::insider::sdk::OperationType value) {
  
  method_ = value;
}
inline void Body::set_method(::insider::sdk::OperationType value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:insider.sdk.Body.method)
}

// repeated .insider.sdk.ResponseResult response_result = 4;
inline int Body::_internal_response_result_size() const {
  return response_result_.size();
}
inline int Body::response_result_size() const {
  return _internal_response_result_size();
}
inline void Body::clear_response_result() {
  response_result_.Clear();
}
inline ::insider::sdk::ResponseResult Body::_internal_response_result(int index) const {
  return static_cast< ::insider::sdk::ResponseResult >(response_result_.Get(index));
}
inline ::insider::sdk::ResponseResult Body::response_result(int index) const {
  // @@protoc_insertion_point(field_get:insider.sdk.Body.response_result)
  return _internal_response_result(index);
}
inline void Body::set_response_result(int index, ::insider::sdk::ResponseResult value) {
  response_result_.Set(index, value);
  // @@protoc_insertion_point(field_set:insider.sdk.Body.response_result)
}
inline void Body::_internal_add_response_result(::insider::sdk::ResponseResult value) {
  response_result_.Add(value);
}
inline void Body::add_response_result(::insider::sdk::ResponseResult value) {
  // @@protoc_insertion_point(field_add:insider.sdk.Body.response_result)
  _internal_add_response_result(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Body::response_result() const {
  // @@protoc_insertion_point(field_list:insider.sdk.Body.response_result)
  return response_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Body::_internal_mutable_response_result() {
  return &response_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Body::mutable_response_result() {
  // @@protoc_insertion_point(field_mutable_list:insider.sdk.Body.response_result)
  return _internal_mutable_response_result();
}

// repeated .insider.sdk.Content content = 5;
inline int Body::_internal_content_size() const {
  return content_.size();
}
inline int Body::content_size() const {
  return _internal_content_size();
}
inline void Body::clear_content() {
  content_.Clear();
}
inline ::insider::sdk::Content* Body::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:insider.sdk.Body.content)
  return content_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::Content >*
Body::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:insider.sdk.Body.content)
  return &content_;
}
inline const ::insider::sdk::Content& Body::_internal_content(int index) const {
  return content_.Get(index);
}
inline const ::insider::sdk::Content& Body::content(int index) const {
  // @@protoc_insertion_point(field_get:insider.sdk.Body.content)
  return _internal_content(index);
}
inline ::insider::sdk::Content* Body::_internal_add_content() {
  return content_.Add();
}
inline ::insider::sdk::Content* Body::add_content() {
  // @@protoc_insertion_point(field_add:insider.sdk.Body.content)
  return _internal_add_content();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::insider::sdk::Content >&
Body::content() const {
  // @@protoc_insertion_point(field_list:insider.sdk.Body.content)
  return content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace insider

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::insider::sdk::UserInfo_UserType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::UserInfo_UserType>() {
  return ::insider::sdk::UserInfo_UserType_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::OperationType>() {
  return ::insider::sdk::OperationType_descriptor();
}
template <> struct is_proto_enum< ::insider::sdk::ResponseResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::insider::sdk::ResponseResult>() {
  return ::insider::sdk::ResponseResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fsdk_5fbody_2eproto
